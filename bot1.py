

import os
import calendar
from icrawler.builtin import GoogleImageCrawler
import requests
from bs4 import BeautifulSoup

from pprint import pprint
import datetime

import requests
import lxml.html

import re
import telebot

import wikipedia
from time import sleep
from datetime import datetime
import pytz

bot_token = '5484310907:AAHqaQsFv9'

bot = telebot.TeleBot(bot_token)
wikipedia.set_lang("ru")

try:
    def getwiki(s):
        try:
            ny = wikipedia.page(s)
            wikitext = ny.content[:1000]
            wikimas = wikitext.split('.')
            wikimas = wikimas[:-1]
            wikitext2 = ''
            for x in wikimas:
                if not('==' in x):
                    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Ç–æ—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
                    if(len((x.strip())) > 3):
                        wikitext2 = wikitext2+x+'.'
                else:
                    break
            wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
            wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
            wikitext2 = re.sub('\{[^\{\}]*\}', '', wikitext2)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            return wikitext2
        except Exception as e:
            return '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º'

    @bot.message_handler(commands=['start'])
    def start(message):
        mess = f'–ü—Ä–∏–∫–æ—Ç, <b>{message.from_user.first_name} </b>!'
        bot.send_message(message.chat.id, mess, parse_mode='html')

    @bot.message_handler(commands=["wiki"])
    def wiki(message):
        bot.send_message(
            message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ–ø–µ–¥–∏–∏, –º—è—É')

        def asking(message):
            mesg = bot.send_message(message.chat.id, '–ß—Ç–æ –∏—â–µ–º?')
            bot.register_next_step_handler(mesg, answer)

        def answer(message):
            bot.send_message(message.chat.id, getwiki(message.text))
        asking(message)

    @bot.message_handler(commands=["calendar"])
    def cal(message):

        def asking(message):
            mesg = bot.send_message(
                message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏ –º–µ—Å—è—Ü –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: 2022/9')
            bot.register_next_step_handler(mesg, answer)

        def answer(message):
            l_i = list(message.text)
            l = len(l_i)
            ind = l_i.index('/')
            year = []
            month = []
            for i in l_i[0:ind]:
                year.append(i)

            for i in l_i[ind+1:l]:
                month.append(i)

            s_l = ''.join(year)
            s_a = ''.join(month)
            year_final_condition = s_a.replace(' ', '-')
            month_final_condition = s_l.replace(' ', '-')
            integ_year = int(year_final_condition)
            integ_month = int(month_final_condition)
            bot.send_message(
                message.chat.id, f'{calendar.month(integ_month, integ_year)}')
        asking(message)

    @bot.message_handler(commands=['btc'])
    def btc_sell_price(message):
        req = requests.get('https://yobit.net/api/3/ticker/btc_usd')
        response = req.json()
        sell_price = response['btc_usd']['sell']
        info = f"–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ ‚Çø –Ω–∞ {datetime.now().strftime('%Y-%m-%d')} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {sell_price} $, –º–∞—É"
        bot.send_message(message.chat.id, info)

    @bot.message_handler(commands=['weather'])
    def weather(message):
        def asking(message):
            mesg = bot.send_message(
                message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, Krasnodar üòº')
            bot.register_next_step_handler(mesg, answer)

        def answer(message):
            API_weather = '504ae7a2597100bebb0b96ec3e727072'
            req = requests.get(
                f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={API_weather}&units=metric')
            date = req.json()
            city = date['name']
            current_temp = date['main']['temp']
            speed_of_wind = date['wind']['speed']
            sunrise_time = datetime.fromtimestamp(date['sys']['sunrise'])
            sunset_time = datetime.fromtimestamp(date['sys']['sunset'])
            bot.send_message(
                message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} üèô.\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: üå° {current_temp}¬∞–° .\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {speed_of_wind} –º/c.\n–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞: üåÖ {sunrise_time}.\n–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: üåá {sunset_time}.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üò∏')
        asking(message)

    @bot.message_handler(commands=['lyrics'])
    def lyrics(message):
        def asking(message):
            bot.send_message(
                message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ —Å–ª—ç—à, –º–∞—É.')
            mesg = bot.send_message(
                message.chat.id,  '–ù–∞–ø—Ä–∏–º–µ—Ä my chemical romance/burn bright')
            bot.register_next_step_handler(mesg, answer)
            print(message.text)

        def answer(message):
            l_i = list(message.text)
            l = len(l_i)
            ind = l_i.index('/')
            author = []
            lyrics = []
            for i in l_i[0:ind]:
                author.append(i)

            for i in l_i[ind+1:l]:
                lyrics.append(i)

            s_l = ''.join(lyrics)
            s_a = ''.join(author)
            author_final_condition = s_a.replace(' ', '-')
            lyrics_final_condition = s_l.replace(' ', '-')
            url = f'https://pesni.guru/text/{author_final_condition}-{lyrics_final_condition}'
            soup = BeautifulSoup("html.parser")
            # Request access to site
            page = requests.get(url)
            # Declaring "tree" - Used to scrape by XPATH
            tree = lxml.html.fromstring(page.content)
            stuff = tree.xpath('/html/body/div/div[3]/div[1]/div/text()')
            print(url)
            bot.send_message(message.chat.id, stuff)
        asking(message)

    @bot.message_handler(commands=['recept'])
    def dish(message):
        def asking(message):
            mesg = bot.send_message(
                message.chat.id,  '–ß—Ç–æ –≥–æ—Ç–æ–≤–∏–º, –º–∞—É?')
            bot.register_next_step_handler(mesg, answer)

        def answer(message):
            dish = message.text.replace(' ', '-').lower()
            url = f'https://tvoirecepty.ru/recept/{dish}'
            print(url)
            api = requests.get(url)
            tree = lxml.html.document_fromstring(api.text)
            text = tree.xpath(
                '//*[@class="instructions"]/div//*[@class="instruction row-xs margin-bottom-20"]/text()')

            final_output = ''.join(text)
            final_output = final_output.replace(
                '                                        ', '')
            final_output = final_output.replace(
                '–í–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è - –ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤—Å–µ–º –æ—Ç–≤–µ—á—É.', '')
            bot.send_message(message.chat.id, final_output)
            bot.send_message(
                message.chat.id, f'–ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å: {url}, –º–∞—É üòº')
        asking(message)

    @bot.message_handler(commands=['photo'])
    def photos(message):

        def asking(message):
            mesg = bot.send_message(
                message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (–Ω–µ –±–æ–ª—å—à–µ 10) —Ç–∏—Ä–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ–Ω—Ñ–µ—Ç–∫–∞-3", –º–∞—É')
            bot.register_next_step_handler(mesg, answer)

        def answer(message):
            l_i = list(message.text)
            l = len(l_i)
            ind = l_i.index('-')
            object = []
            amount = []
            for i in l_i[0:ind]:
                object.append(i)

            for i in l_i[ind+1:l]:
                amount.append(i)

            string_object = ''.join(object)
            string_amount = ''.join(amount)
            int_amout = int(string_amount)

            google_crawler_bot = GoogleImageCrawler(
                storage={'root_dir': 'C:/Users/79384/Desktop/telegram_bot'})
            dirname = 'C:/Users/79384/Desktop/telegram_bot'
            files_original = os.listdir(dirname)
            google_crawler_bot.crawl(keyword=string_object, max_num=int_amout)
            files_after_pars = os.listdir(
                'C:/Users/79384/Desktop/telegram_bot')
            difference_1 = set(files_original).difference(
                set(files_after_pars))
            difference_2 = set(files_after_pars).difference(
                set(files_original))
            names_of_photos = list(difference_1.union(difference_2))
            i = 0
            l = len(names_of_photos)
            while i < l:
                bot.send_photo(message.chat.id, photo=open(
                    f'{names_of_photos[i]}', 'rb'))
                i += 1
            q = 0
            while q < l:
                os.remove(f'{names_of_photos[q]}')
                q += 1
        asking(message)

    try:
        @bot.message_handler(content_types='text')
        def get_user_text(message):
            if '@IamKitty_bot ' in message.text:
                if '–º–∞—É' in message.text.lower():
                    bot.send_message(
                        message.chat.id, '–º–∞—É-–º–∞—É', parse_mode='html')
                elif 'id' in message.text.lower():
                    bot.send_message(
                        message.chat.id, f'–¢–≤o–π id: {message.from_user.id}, –º–∞—É üò∏', parse_mode='html')
                elif '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ' in message.text.lower():
                    s = message.text.lower()
                    l = len(s)
                    integ = []
                    i = 0
                    while i < l:
                        s_int = ''
                        a = s[i]
                        while '0' <= a <= '9':
                            s_int += a
                            i += 1
                            if i < l:
                                a = s[i]
                            else:
                                break
                        i += 1
                        if s_int != '':
                            integ.append(int(s_int))

                    x = 0
                    while x < integ[0]:
                        bot.send_photo(message.chat.id,
                                       photo=open('cat.png', 'rb'))
                        sleep(1.5)
                        x += 1
                elif '—Å–∫–∏–Ω—å –º–Ω–æ–≥–æ' in message.text.lower():
                    x = 0
                    while x < 15:
                        bot.send_photo(message.chat.id,
                                       photo=open('cat.png', 'rb'))
                        sleep(1.5)
                        x += 1

                elif '–ø–µ—Å–µ–Ω' in message.text.lower() or '–º—É–∑—ã–∫' in message.text.lower() or '–ø–µ—Å–Ω' in message.text.lower():
                    audio = open(
                        'Zhanulka - –¢—ã –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ—Ç–∞, —Ö–æ—á—É –∑–∞–±—Ä–∞—Ç—å —Ç–µ–±—è –¥–æ–º–æ–π (MATLY Remix).mp3', 'rb')
                    bot.send_audio(message.chat.id, audio)
                    bot.send_message(
                        message.chat.id, '–≤–æ—Ç, –º–æ—è –ª—é–±–∏–º–∞—è –ø–µ—Å–µ–Ω–∫–∞, –º–∞—É üò∏')
                elif '—Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ' in message.text.lower():
                    bot.send_message(message.
                                     chat.id, '–ú–æ—ë –ª—é–±–º–æ–µ –∞–Ω–∏–º–µ —Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Å–≤–æ–±–æ–¥–µ, –±–æ—Ä–µ—Ç—Å—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–µ –Ω–∞ —á—Ç–æ, –∞ –µ—â—ë —è –ª—é–±–ª—é —á—Ç–æ–±—ã —Ç–∞–º —á–º–æ–∫–∏-—á–º–æ–∫–∏ –±—ã–ª–∏ üòå')
                elif '—Å–ø–æ–π' in message.text.lower():
                    bot.send_message(
                        message.chat.id, '–∫–∏—Å-–∫–∏—Å –∫–∏—Å-–∫–∏—Å\n—è –∫–æ—Ç–∏–∫, —Ç—ã –∫–æ—Ç–∏–∫\n–∞ —Ç–≤–æ–∏ –ø–æ—Ü–µ–ª—É–∏ –ø–æ—á—Ç–∏ –∫–∞–∫ –ª—ë–≥–∫–∏–π –Ω–∞—Ä–∫–æ—Ç–∏–∫ üòΩüé§')
                elif 'üòΩ' in message.text:
                    bot.send_message(message.chat.id, 'üòΩüòΩ')
                elif '–∫–æ—Ç—Ä–æ' in message.text or '–∫–æ—Ç—Ä–µ' in message.text.lower():
                    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ–µ –∫–æ—Ç—Ä–æ ‚òÄÔ∏è !')

                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–í—ã —Ö–æ—Ä–æ—à–æ —Å–ø–∞–ª–∏?')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        if '–¥–∞' in message.text.lower():
                            bot.send_message(
                                message.chat.id, '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –Ø —Ç–æ–∂–µ –≤—ã—Å–ø–∞–ª—Å—è, –º–∞—É üò∏')
                            return asking
                        else:
                            bot.send_message(
                                message.chat.id, '–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –º–Ω–µ –∏–Ω–æ–≥–¥–∞ —Å–Ω—è—Ç—å—Å—è –∫–æ—à–º–∞—Ä–µ–Ω—å–∫–∏–µ, –Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —è —Å–ø–ª—é —Ö–æ—Ä–æ—à–æ, –º–∞—É')
                            return asking
                    asking(message)
                elif "üêü" in message.text or "üê†" in message.text or "üê°" in message.text:
                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–û! –†—ã–±–æ–Ω—å–∫–∏–π! –ú–æ–∂–Ω–æ —Å–∫—É—à–∞—Ç—å? üòã')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        if '–¥–∞' in message.text.lower() or '–º–æ–∂–Ω–æ' in message.text.lower():
                            bot.send_message(
                                message.chat.id, '–ê–º–Ω—è–∞–º–Ω—è–Ω—è–º')
                            bot.send_message(
                                message.chat.id, '–û—á–µ–Ω—å –≤–∫—É—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ!')

                            return asking
                        else:
                            bot.send_message(
                                message.chat.id, '–º–∏—É—É—É :—Å')
                            return asking
                    asking(message)
                elif "ü¶â" in message.text or "ü¶Ö" in message.text or "ü¶Ü" in message.text or "üê•" in message.text or "üê§" in message.text or "üê§" in message.text or "üê¶" in message.text or "üêß" in message.text or "üêî" in message.text or "ü¶ú" in message.text or "ü¶§" in message.text or "ü¶©" in message.text or "üêì" in message.text:
                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–ú–∞—É! –≠—Ç–æ –ø—Ç–∏—á–µ–Ω—å–∫–∏–π! –ú–æ–∂–Ω–æ —è —Å–∫—É—à–∞—é? üòã')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        if '–¥–∞' in message.text.lower() or '–º–æ–∂–Ω–æ' in message.text.lower():
                            bot.send_message(
                                message.chat.id, '–ê–º–Ω—è–∞–º–Ω—è–Ω—è–º')
                            bot.send_message(
                                message.chat.id, '–û—á–µ–Ω—å –≤–∫—É—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ!')

                            return asking
                        else:
                            bot.send_message(
                                message.chat.id, '–º–∏—É—É—É :—Å')
                            return asking
                    asking(message)
                elif "üêπ" in message.text or "üê≠" in message.text or "üêÅ" in message.text or "üêÄ" in message.text:
                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–ú—ã—ã—ã—à–µ–Ω—å–∫–∏–π! –ù–∞–≤–µ—Ä–Ω–æ–µ –æ–Ω –≤–∫—É—Å–Ω–µ–Ω—å–∫–∏–π. –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üòã')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        if '–¥–∞' in message.text.lower() or '–º–æ–∂–Ω–æ' in message.text.lower():
                            bot.send_message(
                                message.chat.id, '–ê–º–Ω—è–∞–º–Ω—è–Ω—è–º')
                            bot.send_message(
                                message.chat.id, '–û—á–µ–Ω—å –≤–∫—É—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ!')

                            return asking
                        else:
                            bot.send_message(
                                message.chat.id, '–º–∏—É—É—É :—Å')
                            return asking
                    asking(message)
                elif "üê∂" in message.text or "üêï‚Äçü¶∫" in message.text or "ü¶Æ" in message.text or "üê©" in message.text or "üêï" in message.text:
                    bot.send_message(
                        message.chat.id, '<b>—à–∏–∏–∏–∏–∏–∏!</b> –≠—Ç–æ –ø–µ—Å—ë–Ω—å–∫–∏–π!! üò°', parse_mode='html')

                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–ú–æ–∂–Ω–æ —è –µ–º—É –∫—É—Å—å —Å–¥–µ–ª–∞—é? üòæ')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        if '–¥–∞' in message.text.lower() or '–º–æ–∂–Ω–æ' in message.text.lower():
                            bot.send_message(
                                message.chat.id, '<em>–∫—É—Å—å-–∫—É—Å—å</em>', parse_mode='html')
                            bot.send_message(
                                message.chat.id, '–¢—Ä—É—Å–ª–∏–≤—ã–π –ø—ë—Å–µ–Ω—å–∫–∏–π! –£–±–µ–∂–∞–ª üòº')

                            return asking
                        else:
                            bot.send_message(
                                message.chat.id, '–º–∏—É—É—É :—Å')
                            return asking
                    asking(message)
                elif '—É–º–Ω–∏—á–∫–∞' in message.text.lower():
                    bot.send_message(message.chat.id, '–º–∞–∞—É—É ‚ò∫Ô∏è')
                elif '—Å—Å—ã–ª–∫' in message.text.lower() or '—é–∂–Ω—ã–π –∫–æ—Ç' in message.text.lower():
                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞ –∏ —Å–µ—Ä–∏–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 1/3, –≥–¥–µ 1 - –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞, –∞ 3 - –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏, –º–∞—É')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        l_episode = list(message.text)
                        l = len(l_episode)
                        ind = l_episode.index('/')
                        season = []
                        episode = []
                        for i in l_episode[0:ind]:
                            season.append(i)

                        for i in l_episode[ind+1:l]:
                            episode.append(i)
                        if len(episode) == 1:
                            episode.insert(0, "0")
                        string_season = ''.join(season)
                        string_episode = ''.join(episode)
                        print(string_season)
                        print(string_episode)
                        url = f'https://sp.freehat.cc/episode/{string_season}{string_episode}/'
                        bot.send_message(
                            message.chat.id, f'–î–µ—Ä–∂–∏—Ç–µ, –º–∞—É {url}')
                    asking(message)
                elif '—Å–ª–∞–¥–∫–∏—Ö' in message.text.lower():
                    bot.send_message(message.chat.id, '–ò –≤–∞–º —Å–ª–∞–¥–∫–∏—Ö üòΩ')
                elif '–≤–∏–¥–µ–æ' in message.text.lower():
                    video = open("cat-vaccum-cat-automatic.mp4", 'rb')
                    bot.send_video(message.chat.id, video)
                # elif '–º—ã—à–µ' in message.text.lower():
                #     bot.send_message(
                #         message.chat.id, '–ù–æ –æ–Ω–∞ —Ç–∞–∫–∞—è –≤–∫—É—Å–Ω–µ–Ω—å–∫–∞—è –Ω–∞–≤–µ—Ä–Ω–æ–µ...')

                #     def asking(message):
                #         mesg = bot.send_message(
                #             message.chat.id, '–ú–æ–∂–µ—Ç –≤—Å—ë —Ç–∞–∫–∏ —Å–∫—É—à–∞–µ–º? üòã')
                #         bot.register_next_step_handler(mesg, answer)

                #     def answer(message):
                #         bot.send_message(

                #             message.chat.id, '–õ–∞–¥–Ω–æ –º—ã—à–µ–±–æ—Ç–µ–Ω—å–∫–∞—è, —è –≤–∞—Å –Ω–µ –±—É–¥—É –∫—É—à–∞—Ç—å, —á–µ—Å—å–Ω–µ–Ω—å–∫–æ!')
                    # asking(message)
                elif '–º—ã—à–∞' in message.text.lower() or '–º—ã—à—É' in message.text.lower():
                    bot.send_message(
                        message.chat.id, '—Å –º—ã—à–µ–π —è –¥—Ä—É–∂–µ–Ω—å–∫–∞—é —Ç–µ–ø–µ—Ä—å üò∏')
                elif '–ø–ª–æ—Ö' in message.text.lower() or '—Ö–æ—Ä–æ—à' in message.text.lower():
                    bot.send_message(message.chat.id, '–∫–æ—Ç—ã —Å–∞–º—ã–µ –ª—É—á—à–∏–µ ‚ò∫Ô∏è')
                elif '–æ–±–Ω–∏–º' in message.text.lower():
                    stik = open('sticker.webp', 'rb')
                    bot.send_sticker(message.chat.id, stik)
                elif '–≤–æ–∑–¥—É—à–Ω' in message.text.lower():
                    stik = open('AnimatedSticker.tgs', 'rb')
                    bot.send_sticker(message.chat.id, stik)
                elif '–æ–ø—Ä–æ—Å' in message.text.lower():
                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –±—É–¥–µ—Ç –æ–ø—Ä–æ—Å, –º–∞—É?')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        bot.send_poll(message.chat.id, message.text.capitalize(), [
                            "–î–∞", "–ù–µ—Ç", "–í–æ–∑–º–æ–∂–Ω–æ"])
                    asking(message)
                elif '–ø–æ–º—É—Ä' in message.text.lower():
                    voice = open('audio_2022-08-11_21-14-41.ogg', 'rb')
                    bot.send_voice(message.chat.id, voice)
                elif '–∑–¥—Ä–∞–≤—Å—Ç–≤' in message.text.lower():
                    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∫–æ—Ç—ã!')
                elif '–∫–∞–∫ –¥–µ–ª–∞' in message.text.lower():
                    bot.send_message(
                        message.chat.id, '–£ –º–µ–Ω—è –≤—Å—ë –∫–æ—Ç–æ—à–æ, —Å–ø–∞—Å–∏–±–æ')

                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞, –º–∞—É?')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        if '–∫–æ—Ç–æ—à–æ' in message.text.lower() or '–∑–∞–º–µ—á–∞—Ç–ª—å–Ω–æ' in message.text.lower() or '—Ç–æ–∂–µ' in message.text.lower() or '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ' in message.text.lower() or '—Ö–æ—Ä–æ—à–æ' in message.text.lower():
                            bot.send_message(message.chat.id, '–Ø —Ä–∞–¥, –º–∞—É!')
                        else:
                            bot.send_message(
                                message.chat.id, '–ú–∞—É! –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –í—Å–µ –±—É–¥–µ—Ç –∫–æ—Ç–æ—à–æ üòΩ')
                    asking(message)
                elif '–≤—Ä–µ–º—è' in message.text.lower():

                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–ù–∞ –ø–ª–∞–Ω–µ—Ç–µ —Ç–∞–∫ –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤, –º–∞—É üåé\n–ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –æ–±–ª–µ–≥—á–∏—Ç—å –ø–æ–∏—Å–∫: –Ω–∞–ø–∏—à–∏—Ç–µ —á–∞—Å—Ç—å —Å–≤–µ—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —á–µ—Ä–µ–∑ "/". –ù–∞–ø—Ä–∏–º–µ—Ä, Asia/Tokyo üáØüáµ , –º–∞—É')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        tz_2 = pytz.timezone(message.text)
                        datetime_2 = datetime.now(tz_2)
                        bot.send_message(
                            message.chat.id, datetime_2.strftime('%H:%M:%S'))
                    asking(message)

                elif '–ø–æ–º—è—É–∫' in message.text.lower():
                    voice = open('audio_2022-08-11_21-19-53.ogg', 'rb')
                    bot.send_voice(message.chat.id, voice)
                elif '—Å–ø–∞—Å–∏–±' in message.text.lower():
                    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–∞—É üò∏ ')
                elif '–∑–∞–ø–∏—à–∏' in message.text.lower():
                    f = open('your_notes.txt', 'a')

                    def asking(message):
                        mesg = bot.send_message(
                            message.chat.id, '–ß—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å, –º–∞—É? ‚úèÔ∏è')
                        bot.register_next_step_handler(mesg, answer)

                    def answer(message):
                        note = message.text.strip().capitalize()
                        f.write(note)
                        f.close()
                        bot.send_message(message.chat.id, '–ö–æ—Ç–æ–≤–æ! ‚ú® ')
                    asking(message)
                elif '–∑–∞–ø–∏—Å–∏' in message.text.lower():
                    doc = open('your_notes.txt', 'rb')
                    bot.send_document(message.chat.id, doc)
                    bot.send_message(message.chat.id, '–î–µ—Ä–∂–∏—Ç–µ, –º–∞—É!')
                elif '—Ñ–æ—Ç–æ –∫–æ—Ç–∞' in message.text.lower():
                    bot.send_photo(message.chat.id,
                                   photo=open('cat.png', 'rb'))
                elif '—Ç—ã –∑–Ω–∞–ª' in message.text.lower():
                    bot.send_message(
                        message.chat.id, '–ü—Ä–∞–≤–¥–∞–Ω—å–∫–∞? –ù–µ—Ç, —è –Ω–µ –∑–Ω–∞–ª, –º–∞—É')
                else:
                    pass
            else:
                pass

        @bot.message_handler(content_types='photo')
        def user_sent_photo(message):
            bot.send_message(message.chat.id, '–û—á–µ–Ω—å –º–∏–ª–æ, –º–∞—É')

    except:
        pass
except:
    pass
bot.polling()
